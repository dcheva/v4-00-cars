[gd_scene load_steps=22 format=3 uid="uid://dq83bbgjp2u0q"]

[ext_resource type="Texture2D" uid="uid://dir7cluak2a2a" path="res://art/car-00.png" id="1"]
[ext_resource type="Script" path="res://Player.gd" id="2"]
[ext_resource type="AudioStream" uid="uid://s0diwwjymhb3" path="res://loops/load_start.wav" id="3_0otxk"]
[ext_resource type="AudioStream" uid="uid://beek1x7b8fx3p" path="res://loops/middle.wav" id="4_3uo7n"]
[ext_resource type="AudioStream" uid="uid://bslaucjxv7000" path="res://loops/load_end.wav" id="5_becrd"]
[ext_resource type="AudioStream" uid="uid://dmrxemwyrottv" path="res://loops/motor.wav" id="6_dcnpj"]
[ext_resource type="AudioStream" uid="uid://bbnu7liew433t" path="res://loops/power.wav" id="7_84by6"]
[ext_resource type="Script" path="res://FSM/start.gd" id="8_f3qwu"]
[ext_resource type="Script" path="res://FSM/idle.gd" id="9_tovbn"]
[ext_resource type="Script" path="res://FSM/power.gd" id="10_jo22m"]
[ext_resource type="Script" path="res://FSM/load.gd" id="11_ypnxo"]
[ext_resource type="Script" path="res://FSM/stop.gd" id="12_v6ghu"]

[sub_resource type="RectangleShape2D" id="1"]
size = Vector2(42, 58)

[sub_resource type="Animation" id="Animation_tr81x"]
resource_name = "Load"
length = 1.25
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Animations/CPUParticles2D1:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Animations/CPUParticles2D2:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Animations/CPUParticles2D1:one_shot")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Animations/CPUParticles2D2:one_shot")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("Animations/CPUParticles2D1:speed_scale")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [1.0]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("Animations/CPUParticles2D1:modulate")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.4)]
}
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("Animations/CPUParticles2D2:speed_scale")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [1.0]
}
tracks/7/type = "value"
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/path = NodePath("Animations/CPUParticles2D2:modulate")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.4)]
}
tracks/8/type = "audio"
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/path = NodePath("Animations/AudioStreamPlayer2D")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/keys = {
"clips": [{
"end_offset": 0.0,
"start_offset": 0.1182,
"stream": ExtResource("7_84by6")
}],
"times": PackedFloat32Array(0)
}
tracks/8/use_blend = true

[sub_resource type="Animation" id="Animation_h04s4"]
resource_name = "Power"
length = 2.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Animations/CPUParticles2D1:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Animations/CPUParticles2D2:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Animations/CPUParticles2D1:one_shot")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Animations/CPUParticles2D2:one_shot")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("Animations/CPUParticles2D1:speed_scale")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [1.0]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("Animations/CPUParticles2D1:modulate")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.4)]
}
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("Animations/CPUParticles2D2:speed_scale")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [1.0]
}
tracks/7/type = "value"
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/path = NodePath("Animations/CPUParticles2D2:modulate")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.4)]
}
tracks/8/type = "audio"
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/path = NodePath("Animations/AudioStreamPlayer2D")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/keys = {
"clips": [{
"end_offset": 0.0,
"start_offset": 0.3998,
"stream": ExtResource("6_dcnpj")
}],
"times": PackedFloat32Array(0)
}
tracks/8/use_blend = true

[sub_resource type="Animation" id="Animation_hxywy"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Animations/CPUParticles2D1:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Animations/CPUParticles2D2:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Animations/CPUParticles2D1:one_shot")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Animations/CPUParticles2D2:one_shot")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("Animations/CPUParticles2D1:speed_scale")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [2.0]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("Animations/CPUParticles2D1:modulate")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.4)]
}
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("Animations/CPUParticles2D2:speed_scale")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [2.0]
}
tracks/7/type = "value"
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/path = NodePath("Animations/CPUParticles2D2:modulate")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.4)]
}
tracks/8/type = "audio"
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/path = NodePath("Animations/AudioStreamPlayer2D")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/keys = {
"clips": [],
"times": PackedFloat32Array()
}
tracks/8/use_blend = true

[sub_resource type="Animation" id="Animation_kvdap"]
resource_name = "Start"
length = 1.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Animations/CPUParticles2D1:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Animations/CPUParticles2D2:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.0666667),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Animations/CPUParticles2D1:one_shot")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Animations/CPUParticles2D2:one_shot")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("Animations/CPUParticles2D1:speed_scale")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [2.0]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("Animations/CPUParticles2D1:modulate")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.4)]
}
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("Animations/CPUParticles2D2:speed_scale")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [2.0]
}
tracks/7/type = "value"
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/path = NodePath("Animations/CPUParticles2D2:modulate")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.4)]
}
tracks/8/type = "audio"
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/path = NodePath("Animations/AudioStreamPlayer2D")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/keys = {
"clips": [{
"end_offset": 0.0,
"start_offset": 0.0,
"stream": ExtResource("3_0otxk")
}],
"times": PackedFloat32Array(0)
}
tracks/8/use_blend = true

[sub_resource type="Animation" id="Animation_4puvq"]
resource_name = "Stop"
length = 1.15
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Animations/CPUParticles2D1:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Animations/CPUParticles2D2:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Animations/CPUParticles2D1:one_shot")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.5),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Animations/CPUParticles2D2:one_shot")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.533333),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("Animations/CPUParticles2D1:speed_scale")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [2.0]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("Animations/CPUParticles2D1:modulate")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.4)]
}
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("Animations/CPUParticles2D2:speed_scale")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [2.0]
}
tracks/7/type = "value"
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/path = NodePath("Animations/CPUParticles2D2:modulate")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.4)]
}
tracks/8/type = "audio"
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/path = NodePath("Animations/AudioStreamPlayer2D")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/keys = {
"clips": [{
"end_offset": 0.0,
"start_offset": 0.0,
"stream": ExtResource("5_becrd")
}],
"times": PackedFloat32Array(0)
}
tracks/8/use_blend = true

[sub_resource type="Animation" id="Animation_7f60f"]
resource_name = "idle"
length = 7.4
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Animations/CPUParticles2D1:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Animations/CPUParticles2D2:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Animations/CPUParticles2D1:one_shot")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Animations/CPUParticles2D2:one_shot")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("Animations/CPUParticles2D1:speed_scale")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [1.0]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("Animations/CPUParticles2D1:modulate")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.2)]
}
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("Animations/CPUParticles2D2:speed_scale")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [1.0]
}
tracks/7/type = "value"
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/path = NodePath("Animations/CPUParticles2D2:modulate")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.2)]
}
tracks/8/type = "audio"
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/path = NodePath("Animations/AudioStreamPlayer2D")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/keys = {
"clips": [{
"end_offset": 0.0,
"start_offset": 0.0,
"stream": ExtResource("4_3uo7n")
}],
"times": PackedFloat32Array(0)
}
tracks/8/use_blend = true

[sub_resource type="AnimationLibrary" id="AnimationLibrary_cisow"]
_data = {
"Load": SubResource("Animation_tr81x"),
"Power": SubResource("Animation_h04s4"),
"RESET": SubResource("Animation_hxywy"),
"Start": SubResource("Animation_kvdap"),
"Stop": SubResource("Animation_4puvq"),
"idle": SubResource("Animation_7f60f")
}

[sub_resource type="GDScript" id="GDScript_bxi4d"]
script/source = "@icon(\"addons/finite_state_machine/icons/finite_state_machine.svg\")
class_name FiniteStateMachine
extends Node


## Node that represents an implementation of the finite state machine pattern.
## Nodes that represent states need to be added as children of this node.


## Signal emitted every time the current state is changed. 'new_state' is the new state node.
## This signal won't be emitted for the state machine's initial state or when the node is not in
## the scene tree to prevent the signal from being emitted more than once for the same change.
signal state_changed(new_state: StateMachineState)


## The state machine's current state.
## Setting this state will call 'on_exit' on the previous state and 'on_enter' on the new state.
## Assigning a state from the inspector allows to select an initial state.
## Can be set to 'null' to clear the current state and stop the state machine.
@export var current_state: StateMachineState = null: set = set_current_state

## Optional reference to an AnimationPlayer node.
## If assigned, the state machine will call the 'on_animation_finished', 'on_animation_started',
## and the 'on_animation_changed' functions on the current state when the respective signals are
## emitted from the AnimationPlayer node.
@export var animation_player: AnimationPlayer = null: set = set_animation_player

# Private variable holding a dictionary that works as a cache for states used in 'change_state'.
var _cache: Dictionary = {}

# Remembers what the previous state was for the 'previous_state' function.
var _previous_state: StateMachineState = null


# Called when the node enters the scene tree. This function is called every time the node is
# removed and readded to the scene and ensures 'on_enter' is always called on the current state
# when the state machine node enters the scene tree. Note that 'on_enter' is not called from
# '_enter_tree' if the state machine node's '_ready' function has not been called yet to ensure
# that the state node's '_ready' function is called before 'on_enter'.
func _enter_tree() -> void:
	if is_node_ready() and is_instance_valid(current_state):
		current_state.on_enter()
		current_state.state_entered.emit()


# Called when the node enters the scene tree for the first time. This function is only called once
# during the node's lifetime and ensures that the 'on_enter' function on the initial state is
# called after its '_ready' function, since the setter function of exported variables is called
# before '_ready'.
func _ready() -> void:
	if is_instance_valid(current_state):
		current_state.on_enter()
		current_state.state_entered.emit()


# Called every frame.
# Calls the 'on_process' function on the current state.
func _process(delta: float) -> void:
	if is_instance_valid(current_state):
		current_state.on_process(delta)


# Called every physics frame.
# Calls the 'on_physics_process' function on the current state.
func _physics_process(delta: float) -> void:
	if is_instance_valid(current_state):
		current_state.on_physics_process(delta)


# Called when there is an input event that hasn't been consumed by the gui.
# Calls the 'on_input' function on the current state.
func _unhandled_input(event: InputEvent) -> void:
	if is_instance_valid(current_state):
		current_state.on_input(event)


# Called when the node exits the scene tree.
# Calls the 'on_exit' function on the current state.
func _exit_tree() -> void:
	if is_instance_valid(current_state):
		current_state.on_exit()
		current_state.state_exited.emit()


# Changes state to the one at the given path relative to the state machine node. This function can
# be used instead of setting 'current_state' directly to change to a state with the given name.
# If the node at the given path is not a StateMachineState node, the current state won't be changed
# and an error will be logged.
func change_state(node_path: NodePath) -> void:
	# Use the cached value if that state has already been accessed
	if is_instance_valid(_cache.get(node_path)):
		current_state = _cache[node_path]
	# Get the node if the requested state has not been accessed yet or if it was deleted
	else:
		# Get the node or log an error if the path does not exist
		var next_state := get_node(node_path) as StateMachineState
		# Change to the new state and cache the value
		if is_instance_valid(next_state):
			_cache[node_path] = next_state
			current_state = next_state
		# Log an error if the result is null or it is not a StateMachineState node.
		else:
			push_error(\"Node \", next_state, \" at path \", node_path, \" is not a valid StateMachineState\")


# Changes the current state to the previous one or logs an error if the previous state is null or
# if the node has been freed. Only one previous state is kept in memory, therefore 'previous_state'
# may only be called once per state.
func previous_state() -> void:
	# Change to the previous state
	if is_instance_valid(_previous_state):
		current_state = _previous_state
		_previous_state = null
	# Log an error if the previous state is null or has been freed.
	else:
		push_error(\"Previous state \", _previous_state, \" is not valid\")


# Setter function for 'current_state'.
func set_current_state(next_state: StateMachineState) -> void:
	# Exit from the previous state
	if is_inside_tree() and is_instance_valid(current_state):
		current_state.on_exit()
		current_state.state_exited.emit()
	_previous_state = current_state
	current_state = next_state
	# Enter the new state
	if is_instance_valid(current_state):
		current_state.state_machine = self
		if is_inside_tree():
			state_changed.emit(current_state)
			current_state.on_enter()
			current_state.state_entered.emit()


# Setter function for 'animation_player'.
func set_animation_player(value: AnimationPlayer) -> void:
	# Disconnect signals from the previous value if there was any
	if is_instance_valid(animation_player):
		animation_player.animation_started.disconnect(_on_animation_started)
		animation_player.animation_finished.disconnect(_on_animation_finished)
		animation_player.animation_changed.disconnect(_on_animation_changed)
	# Assign the new value
	animation_player = value
	# Connect signals to the animation player
	if is_instance_valid(animation_player):
		animation_player.animation_started.connect(_on_animation_started)
		animation_player.animation_finished.connect(_on_animation_finished)
		animation_player.animation_changed.connect(_on_animation_changed)


# Called by the 'animation_started' signal emitted from the AnimationPlayer node.
# An AnimationPlayer needs to be assigned for this to be called.
func _on_animation_started(anim_name: StringName) -> void:
	if is_instance_valid(current_state):
		current_state.on_animation_started(anim_name)


# Called by the 'animation_finished' signal emitted from the AnimationPlayer node.
# An AnimationPlayer needs to be assigned for this function to be called.
func _on_animation_finished(anim_name: StringName) -> void:
	if is_instance_valid(current_state):
		current_state.on_animation_finished(anim_name)


# Called by the 'animation_changed' signal emitted from the AnimationPlayer node.
# An AnimationPlayer needs to be assigned for this function to be called.
func _on_animation_changed(old_name: StringName, new_name: StringName) -> void:
	if is_instance_valid(current_state):
		current_state.on_animation_changed(old_name, new_name)
"

[node name="Player" type="CharacterBody2D"]
script = ExtResource("2")

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -17)
texture = ExtResource("1")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, -17)
shape = SubResource("1")

[node name="DrawTrack" type="Timer" parent="."]
wait_time = 10.0
one_shot = true

[node name="idleTimer" type="Timer" parent="."]
one_shot = true
autostart = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_cisow")
}

[node name="Animations" type="Node2D" parent="."]

[node name="CPUParticles2D1" type="CPUParticles2D" parent="Animations"]
modulate = Color(1, 1, 1, 0.4)
position = Vector2(-21, -18)
emitting = false
amount = 128
speed_scale = 2.0
randomness = 0.5
emission_shape = 1
emission_sphere_radius = 1.0
direction = Vector2(0, 0)
spread = 180.0
gravity = Vector2(0, 0)
initial_velocity_min = 5.0
initial_velocity_max = 15.0
linear_accel_min = 2.0
linear_accel_max = 4.0
scale_amount_min = 2.0
scale_amount_max = 4.0

[node name="CPUParticles2D2" type="CPUParticles2D" parent="Animations"]
modulate = Color(1, 1, 1, 0.4)
position = Vector2(21, -18)
emitting = false
amount = 128
speed_scale = 2.0
randomness = 0.5
emission_shape = 1
emission_sphere_radius = 1.0
direction = Vector2(0, 0)
spread = 180.0
gravity = Vector2(0, 0)
initial_velocity_min = 5.0
initial_velocity_max = 15.0
linear_accel_min = 2.0
linear_accel_max = 4.0
scale_amount_min = 2.0
scale_amount_max = 4.0

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="Animations"]

[node name="FiniteStateMachine" type="Node" parent="."]
script = SubResource("GDScript_bxi4d")

[node name="Start" type="Node" parent="FiniteStateMachine"]
script = ExtResource("8_f3qwu")

[node name="Idle" type="Node" parent="FiniteStateMachine"]
script = ExtResource("9_tovbn")

[node name="Power" type="Node" parent="FiniteStateMachine"]
script = ExtResource("10_jo22m")

[node name="Load" type="Node" parent="FiniteStateMachine"]
script = ExtResource("11_ypnxo")

[node name="Stop" type="Node" parent="FiniteStateMachine"]
script = ExtResource("12_v6ghu")

[connection signal="timeout" from="DrawTrack" to="." method="_on_draw_track_timeout"]
[connection signal="timeout" from="idleTimer" to="." method="_on_idle_timer_timeout"]
